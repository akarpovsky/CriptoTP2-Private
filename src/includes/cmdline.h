/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "stegobmp"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "stegobmp"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  const char *embed_help; /**< @brief Indica que se ocultara informacion help description.  */
  char * in_arg;	/**< @brief Archivo que se va a ocultar.  */
  char * in_orig;	/**< @brief Archivo que se va a ocultar original value given at command line.  */
  const char *in_help; /**< @brief Archivo que se va a ocultar help description.  */
  const char *extract_help; /**< @brief Indica que se extraera la informacion oculta en un BMP help description.  */
  char * out_arg;	/**< @brief Archivo BMP de entrada/salida.  */
  char * out_orig;	/**< @brief Archivo BMP de entrada/salida original value given at command line.  */
  const char *out_help; /**< @brief Archivo BMP de entrada/salida help description.  */
  char * steg_arg;	/**< @brief Algoritmo de esteganografiado.  */
  char * steg_orig;	/**< @brief Algoritmo de esteganografiado original value given at command line.  */
  const char *steg_help; /**< @brief Algoritmo de esteganografiado help description.  */
  char * p_arg;	/**< @brief Archivo BMP portador.  */
  char * p_orig;	/**< @brief Archivo BMP portador original value given at command line.  */
  const char *p_help; /**< @brief Archivo BMP portador help description.  */
  char * a_arg;	/**< @brief Algoritmo de encripcion (default='aes128').  */
  char * a_orig;	/**< @brief Algoritmo de encripcion original value given at command line.  */
  const char *a_help; /**< @brief Algoritmo de encripcion help description.  */
  char * m_arg;	/**< @brief Modo de encadenamiento (default='cbc').  */
  char * m_orig;	/**< @brief Modo de encadenamiento original value given at command line.  */
  const char *m_help; /**< @brief Modo de encadenamiento help description.  */
  char * pass_arg;	/**< @brief Password de encripcion.  */
  char * pass_orig;	/**< @brief Password de encripcion original value given at command line.  */
  const char *pass_help; /**< @brief Password de encripcion help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int embed_given ;	/**< @brief Whether embed was given.  */
  unsigned int in_given ;	/**< @brief Whether in was given.  */
  unsigned int extract_given ;	/**< @brief Whether extract was given.  */
  unsigned int out_given ;	/**< @brief Whether out was given.  */
  unsigned int steg_given ;	/**< @brief Whether steg was given.  */
  unsigned int p_given ;	/**< @brief Whether p was given.  */
  unsigned int a_given ;	/**< @brief Whether a was given.  */
  unsigned int m_given ;	/**< @brief Whether m was given.  */
  unsigned int pass_given ;	/**< @brief Whether pass was given.  */

  int DECRYPT_mode_counter; /**< @brief Counter for mode DECRYPT */
  int ENCRYPT_mode_counter; /**< @brief Counter for mode ENCRYPT */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_steg_values[];  /**< @brief Possible values for steg. */
extern const char *cmdline_parser_a_values[];  /**< @brief Possible values for a. */
extern const char *cmdline_parser_m_values[];  /**< @brief Possible values for m. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
